name: Container Security & Performance

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.dockerignore'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.dockerignore'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  dockerfile-security:
    name: Dockerfile Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint Dockerfile linter
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          failure-threshold: warning

      - name: Upload Hadolint scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif

      - name: Run Checkov security scan on Dockerfile
        uses: bridgecrewio/checkov-action@master
        with:
          file: Dockerfile
          framework: dockerfile
          output_format: sarif
          output_file_path: checkov-dockerfile.sarif

      - name: Upload Checkov Dockerfile results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-dockerfile.sarif

  container-build-test:
    name: Container Build & Performance Test
    runs-on: ubuntu-latest
    needs: dockerfile-security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          tags: chess-game:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test container startup
        run: |
          # Start container in background
          docker run -d --name chess-test -p 3001:3001 chess-game:test
          
          # Wait for container to be ready
          sleep 10
          
          # Check if container is running
          if docker ps | grep -q chess-test; then
            echo "Container started successfully"
          else
            echo "Container failed to start"
            docker logs chess-test
            exit 1
          fi
          
          # Health check
          for i in {1..30}; do
            if docker exec chess-test node --version > /dev/null 2>&1; then
              echo "Health check passed"
              break
            fi
            echo "Waiting for health check... ($i/30)"
            sleep 1
          done
          
          # Cleanup
          docker stop chess-test
          docker rm chess-test

      - name: Analyze image efficiency
        run: |
          echo "## Image Analysis" >> $GITHUB_STEP_SUMMARY
          echo "### Image Size" >> $GITHUB_STEP_SUMMARY
          docker images chess-game:test --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Layer Information" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          docker history chess-game:test --no-trunc >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Run container structure test
        uses: plexsystems/container-structure-test-action@v0.3.0
        with:
          image: chess-game:test
          config: .github/container-structure-test.yaml

  multi-arch-build:
    name: Multi-Architecture Build Test
    runs-on: ubuntu-latest
    needs: dockerfile-security
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build for ${{ matrix.platform }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          tags: chess-game:${{ matrix.platform }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-benchmark:
    name: Security Benchmark
    runs-on: ubuntu-latest
    needs: container-build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build image for benchmarking
        run: docker build -t chess-game:benchmark .

      - name: Run Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security:latest > docker-bench-results.txt || true

      - name: Upload Docker Bench results
        uses: actions/upload-artifact@v4
        with:
          name: docker-bench-security-results
          path: docker-bench-results.txt

      - name: Analyze results
        run: |
          echo "## Docker Security Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          grep -E "(PASS|WARN|INFO)" docker-bench-results.txt | head -20 >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
